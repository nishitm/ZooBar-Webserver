After reading the hint file, we came to know that how GOT attack works. In this hackme.c file first we analyze the flow using gdb ./hackme and found out that safe_strcpy() function was not actually safe function for string copy. So we exploit it and found out that last byte of buffer will overwrite the previous frame's $ebp value. So we set the value of $ebp in current buffer and put the address of _exit() function which we found using objdump -R hackme and put it at $ebp-8 (pointer p located) and address of read_flag() at $ebp-4 (location of a) (because after string copying function, *p=a will be called and it will change address of _exit() to read_flag() in GOT). So on _exit(), read_flag will be called.
Since env variable were stuffed, we ran the python script for different addresses out of which one was working fine  